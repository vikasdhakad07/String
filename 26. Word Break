Method 01: Recursion


class Sol
{
    public static int wordBreak(String A, ArrayList<String> B )
    {
        //code here
        return help(0,A,B);
    }
    
    public static int help(int i,String s,ArrayList<String> B){
        if(i==s.length()){
            return 1;
        }
        
        String temp="";
        for(int j=i;j<s.length();j++){
            temp+=s.charAt(j);
            if(B.contains(temp)){
                if(help(j+1,s,B)==1){
                    return 1;
                }
            }
        }
        return 0;
    }
}


Method 02: DP


class Sol
{
    public static int wordBreak(String A, ArrayList<String> B )
    {
        //code here
        int n=A.length();
        int dp[]=new int[n+1];
        return help(0,A,B,dp);
    }
    
    public static int help(int i,String s,ArrayList<String> B,int dp[]){
        if(i==s.length()){
            return 1;
        }
        
        if(dp[i]!=0){
            return dp[i];
        }
        
        String temp="";
        for(int j=i;j<s.length();j++){
            temp+=s.charAt(j);
            if(B.contains(temp)){
                if(help(j+1,s,B,dp)==1){
                    return dp[i]=1;
                }
            }
        }
        return dp[i]=0;
    }
}
